==========================================
Tests for the 0-add_integer module
==========================================

This module has one function which is the ``add_integer()``
function which accepts an integer or float and return the sum as integer.
Raises an ``exception`` if the argument is not an int or float.
==========================================

Importing the ``add_integer()`` function
        >>> add_integer = __import__("0-add_integer").add_integer

checking for module docstring
        >>> mod_str = __import__("0-add_integer").__doc__
        >>> len(mod_str) > 5
        True

checking for function docstring
        >>> fun_docs = add_integer.__doc__
        >>> len(fun_docs) > 5
        True

checking addition of positive integer
        >>> add_integer(10, 5)
        15
        >>> add_integer(8888888888888888888888888888888, 1)
	8888888888888888888888888888889

checking addition of negative integers
        >>> add_integer(-10, -5)
	-15

checking addition of both positive and negative integers
        >>> add_integer(3, -4)
	-1

checking addition of floats
        >>> add_integer(2.43, 0.32)
        2
        >>> add_integer(6.0/2.0, 5)
	8
        >>> add_integer(float("inf"), 9)
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer
        >>> add_integer(7.0, float("nan"))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer
        
checking addition of strings
        >>> add_integer(" ", 5)
        Traceback (most recent call last):
        TypeError: a must be an integer
        >>> add_integer("boy")
        Traceback (most recent call last):
        TypeError: a must be an integer
        >>> add_integer(20, "pen")
        Traceback (most recent call last):
        TypeError: b must be an integer

checking addition of lists
        >>> add_integer([2, 1, 4], [1,2,3])
        Traceback (most recent call last):
        TypeError: a must be an integer
        >>> add_integer(1, [])
        Traceback (most recent call last):
        TypeError: b must be an integer
        
checking addition of dictionarys
        >>> add_integer({"add": 3}, float(5))
        Traceback (most recent call last):
        TypeError: a must be an integer

checking addition of boolean values
        >>> add_integer(True, 2)
        Traceback (most recent call last):
        TypeError: a must be an integer

checking addition of more then required arguments
        >>> add_integer(1, 7, 20)
        Traceback (most recent call last):
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

checking when no arguments is passed
        >>> add_integer()
        Traceback (most recent call last):
        TypeError: add_integer() missing 1 required positional argument: 'a'

Test for another data type other than integer:
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer("dude", 20)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
    >>> add_integer(20, (1,2))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

Test if the function takes in float and int:
    >>> add_integer(3.4, 20)
    23

Test for negative number:
    >>> add_integer(-20, 345)
    325

Test if a is empty:
    >> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
